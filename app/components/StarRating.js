"use client";

import React, { useEffect, useState } from "react";
import styles from "../styles/starRating.module.scss";
const StarIcon = ({ filled, onClick }) => (
  <svg
    width="65"
    height="65"
    viewBox="0 0 65 65"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    onClick={onClick}
    style={{ cursor: "pointer", width: 64, height: 64 }}
  >
    <rect width="65" height="65" fill="#1E1E1E" />
    <g clipPath="url(#clip0_0_1)">
      <rect x="-427" y="-363.418" width="1440" height="2052" fill="#F2F4F8" />
      <path
        d="M-31.5 -146.236C-31.5 -155.197 -31.5 -159.677 -29.7561 -163.1C-28.2221 -166.11 -25.7744 -168.558 -22.7638 -170.092C-19.3413 -171.836 -14.8608 -171.836 -5.9 -171.836H590.9C599.861 -171.836 604.341 -171.836 607.764 -170.092C610.774 -168.558 613.222 -166.11 614.756 -163.1C616.5 -159.677 616.5 -155.197 616.5 -146.236V1629.56C616.5 1638.52 616.5 1643.01 614.756 1646.43C613.222 1649.44 610.774 1651.89 607.764 1653.42C604.341 1655.16 599.861 1655.16 590.9 1655.16H-5.90002C-14.8608 1655.16 -19.3413 1655.16 -22.7638 1653.42C-25.7744 1651.89 -28.2221 1649.44 -29.7561 1646.43C-31.5 1643.01 -31.5 1638.52 -31.5 1629.56V-146.236Z"
        fill="white"
      />
      <mask id="path-4-inside-1_0_1" fill="white">
        <path d="M30.8764 12.6949C31.398 11.6381 31.6589 11.1097 32.013 10.9409C32.321 10.794 32.6789 10.794 32.987 10.9409C33.3411 11.1097 33.6019 11.6381 34.1236 12.6949L39.0727 22.7212C39.2267 23.0332 39.3037 23.1892 39.4162 23.3103C39.5159 23.4176 39.6354 23.5045 39.7681 23.5662C39.918 23.6359 40.0902 23.6611 40.4344 23.7114L51.5048 25.3295C52.6706 25.4999 53.2534 25.5851 53.5232 25.8698C53.7579 26.1175 53.8683 26.4579 53.8236 26.7963C53.7722 27.1851 53.3502 27.5961 52.5063 28.4182L44.4987 36.2175C44.2491 36.4607 44.1242 36.5822 44.0437 36.7269C43.9724 36.8549 43.9267 36.9956 43.909 37.1412C43.8891 37.3055 43.9185 37.4772 43.9774 37.8207L45.8669 48.837C46.0661 49.9989 46.1658 50.5798 45.9785 50.9246C45.8156 51.2245 45.526 51.4349 45.1904 51.4972C44.8046 51.5687 44.2829 51.2943 43.2395 50.7456L33.3428 45.541C33.0344 45.3788 32.8802 45.2977 32.7178 45.2659C32.574 45.2377 32.426 45.2377 32.2822 45.2659C32.1198 45.2977 31.9656 45.3788 31.6572 45.541L21.7605 50.7456C20.7171 51.2943 20.1954 51.5687 19.8096 51.4972C19.474 51.4349 19.1844 51.2245 19.0215 50.9246C18.8342 50.5798 18.9338 49.9989 19.1331 48.837L21.0225 37.8207C21.0814 37.4772 21.1109 37.3055 21.091 37.1412C21.0733 36.9956 21.0276 36.8549 20.9563 36.7269C20.8757 36.5822 20.7509 36.4607 20.5013 36.2175L12.4937 28.4181C11.6497 27.5961 11.2278 27.1851 11.1764 26.7963C11.1317 26.4579 11.2421 26.1175 11.4768 25.8698C11.7465 25.5851 12.3294 25.4999 13.4952 25.3295L24.5656 23.7114C24.9098 23.6611 25.082 23.6359 25.2319 23.5662C25.3646 23.5045 25.4841 23.4176 25.5838 23.3103C25.6963 23.1892 25.7733 23.0332 25.9273 22.7212L30.8764 12.6949Z" />
      </mask>
      <path
        d="M30.8764 12.6949C31.398 11.6381 31.6589 11.1097 32.013 10.9409C32.321 10.794 32.6789 10.794 32.987 10.9409C33.3411 11.1097 33.6019 11.6381 34.1236 12.6949L39.0727 22.7212C39.2267 23.0332 39.3037 23.1892 39.4162 23.3103C39.5159 23.4176 39.6354 23.5045 39.7681 23.5662C39.918 23.6359 40.0902 23.6611 40.4344 23.7114L51.5048 25.3295C52.6706 25.4999 53.2534 25.5851 53.5232 25.8698C53.7579 26.1175 53.8683 26.4579 53.8236 26.7963C53.7722 27.1851 53.3502 27.5961 52.5063 28.4182L44.4987 36.2175C44.2491 36.4607 44.1242 36.5822 44.0437 36.7269C43.9724 36.8549 43.9267 36.9956 43.909 37.1412C43.8891 37.3055 43.9185 37.4772 43.9774 37.8207L45.8669 48.837C46.0661 49.9989 46.1658 50.5798 45.9785 50.9246C45.8156 51.2245 45.526 51.4349 45.1904 51.4972C44.8046 51.5687 44.2829 51.2943 43.2395 50.7456L33.3428 45.541C33.0344 45.3788 32.8802 45.2977 32.7178 45.2659C32.574 45.2377 32.426 45.2377 32.2822 45.2659C32.1198 45.2977 31.9656 45.3788 31.6572 45.541L21.7605 50.7456C20.7171 51.2943 20.1954 51.5687 19.8096 51.4972C19.474 51.4349 19.1844 51.2245 19.0215 50.9246C18.8342 50.5798 18.9338 49.9989 19.1331 48.837L21.0225 37.8207C21.0814 37.4772 21.1109 37.3055 21.091 37.1412C21.0733 36.9956 21.0276 36.8549 20.9563 36.7269C20.8757 36.5822 20.7509 36.4607 20.5013 36.2175L12.4937 28.4181C11.6497 27.5961 11.2278 27.1851 11.1764 26.7963C11.1317 26.4579 11.2421 26.1175 11.4768 25.8698C11.7465 25.5851 12.3294 25.4999 13.4952 25.3295L24.5656 23.7114C24.9098 23.6611 25.082 23.6359 25.2319 23.5662C25.3646 23.5045 25.4841 23.4176 25.5838 23.3103C25.6963 23.1892 25.7733 23.0332 25.9273 22.7212L30.8764 12.6949Z"
        stroke={filled ? "#FFAE00" : "#ACB1BA"}
        strokeWidth="30"
        strokeLinecap="round"
        strokeLinejoin="round"
        mask="url(#path-4-inside-1_0_1)"
      />
    </g>
    <rect x="-426.5" y="-362.918" width="1439" height="2051" stroke="black" />
    <defs>
      <clipPath id="clip0_0_1">
        <rect x="-427" y="-363.418" width="1440" height="2052" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

const StarRating = ({ data }) => {
  const [rating, setRating] = useState(1);

  useEffect(() => {
    data(rating);
  }, [rating]);

  const renderStars = () => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <StarIcon key={i} filled={i <= rating} onClick={() => setRating(i)} />,
      );
    }
    return stars;
  };

  return (
    <div className={styles["star-rating"]}>
      {renderStars()}{" "}
      <input
        className={styles["star-icon"]}
        type="hidden"
        name="starRating"
        value={rating}
        readOnly
      />
    </div>
  );
};

export default StarRating;
